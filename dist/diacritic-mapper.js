"use strict";function isString(i){return"string"==typeof i}Object.defineProperty(exports,"__esModule",{value:!0});class DiacriticAbstractHandler{get(i,e,t){return isString(e)&&1===e.length?this.diacriticTrap(i,e):Reflect.get(i,e,t)}diacriticTrap(i,e){}}class DiacriticRemoverHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){return Object.keys(i.matcher).find(t=>isString(i.matcher[t])&&i.matcher[t].includes(e))||e}}class DiacriticInsensitiveMatcherHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){return[e.toLowerCase(),e.toUpperCase()].map(e=>i.matcher[e]||"").join("")||e}}class DiacriticValidatorHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){return new RegExp(`[${e}${i.matcher[e]||""}]`,"u")}}class DiacriticInsensitiveValidatorHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){return new RegExp(`[${e}${i.insensitiveMatcher[e]||""}]`,"ui")}}class DiacriticMapperCore{constructor(i){const e=i.reduce((i,e)=>(Object.entries(e).forEach(([e,t])=>{if(e in i){const r=t.split("").filter(t=>!i[e].includes(t)).join("");i[e]+=r}else i[e]=t}),i),{});this.matcher=Object.freeze(e),this.insensitiveMatcher=new Proxy(this,new DiacriticInsensitiveMatcherHandler),this.validator=new Proxy(this,new DiacriticValidatorHandler),this.insensitiveValidator=new Proxy(this,new DiacriticInsensitiveValidatorHandler)}matcherBy(i){return Object.keys(this.matcher).filter(e=>i.test(e)).map(i=>this.matcher[i]||"").join("")}}const DiacriticMapper=(...i)=>new Proxy(new DiacriticMapperCore(i),new DiacriticRemoverHandler);exports.DiacriticMapper=DiacriticMapper;
