var DiacriticFilter=function(e){"use strict";function t(e){return"string"==typeof e}class i{get(e,i,r){return t(i)&&1===i.length?this.diacriticTrap(e,i):Reflect.get(e,i,r)}diacriticTrap(e,t){}}class r extends i{diacriticTrap(e,i){return Object.keys(e.matcher).find(r=>t(e.matcher[r])&&e.matcher[r].includes(i))||i}}class c extends i{diacriticTrap(e,t){return[t.toLowerCase(),t.toUpperCase()].map(t=>e.matcher[t]||"").join("")||t}}class s extends i{diacriticTrap(e,t){return new RegExp(`[${t}${e.matcher[t]||""}]`,"u")}}class n extends i{diacriticTrap(e,t){return new RegExp(`[${t}${e.insensitiveMatcher[t]||""}]`,"ui")}}class a{constructor(e){const t=e.reduce((e,t)=>(Object.entries(t).forEach(([t,i])=>{if(t in e){const r=i.split("").filter(i=>!e[t].includes(i)).join("");e[t]+=r}else e[t]=i}),e),{});this.matcher=Object.freeze(t),this.insensitiveMatcher=new Proxy(this,new c),this.validator=new Proxy(this,new s),this.insensitiveValidator=new Proxy(this,new n)}matcherBy(e){return Object.keys(this.matcher).filter(t=>e.test(t)).map(e=>this.matcher[e]||"").join("")}}return e.DiacriticMapper=(...e)=>new Proxy(new a(e),new r),e}({});
