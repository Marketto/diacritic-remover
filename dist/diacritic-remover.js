/**
 * @marketto/diacritic-remover 1.0.0
 * Copyright (c) 2019, Marco Ricupero <marco.ricupero@gmail.com>
 * License: MIT
 * ============================================================
 * I18N_ALL use material from Wikipedia
 * Article: https://en.wikipedia.org/wiki/Diacritic
 * License: CC-BY-SA 3.0
 */
"use strict";function isString(i){return"string"==typeof i}class DiacriticAbstractHandler{get(i,e,r){return isString(e)&&1===e.length?this.diacriticTrap(i,e):Reflect.get(i,e,r)}has(i,e){return isString(e)&&1===e.length||Reflect.has(i,e)}diacriticTrap(i,e){}}class DiacriticRemoverHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){const r=i.isUpperCase(e),t=e.toLowerCase(),a=Object.keys(i.dictionary).find(e=>isString(i.dictionary[e])&&i.dictionary[e].includes(t));return r&&a?a.toUpperCase():a||e}}class DiacriticMatcherHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){const r=i.dictionary[e.toLowerCase()];return r?i.isUpperCase(e)?r.toUpperCase():r:e}}class DiacriticInsensitiveMatcherHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){const r=i.dictionary[e.toLowerCase()];return r?r+r.toUpperCase():e}}class DiacriticValidatorHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){const r=i.dictionary[e.toLowerCase()];let t="";return r&&(t=i.isUpperCase(e)?r.toUpperCase():r),new RegExp(`[${e}${t}]`,"u")}}class DiacriticInsensitiveValidatorHandler extends DiacriticAbstractHandler{diacriticTrap(i,e){return new RegExp(`[${e}${i.insensitiveMatcher[e]||""}]`,"ui")}}class DiacriticMapperCore{constructor(i){const e=i.reduce((i,e)=>(Object.entries(e).forEach(([e,r])=>{if(e in i){const t=r.split("").filter(r=>!i[e].includes(r)).join("");i[e]+=t}else i[e]=r}),i),{});this.dictionary=Object.freeze(e),this.matcher=new Proxy(this,new DiacriticMatcherHandler),this.insensitiveMatcher=new Proxy(this,new DiacriticInsensitiveMatcherHandler),this.validator=new Proxy(this,new DiacriticValidatorHandler),this.insensitiveValidator=new Proxy(this,new DiacriticInsensitiveValidatorHandler)}matcherBy(i){return[...Object.keys(this.dictionary).filter(e=>i.test(e)).map(i=>this.dictionary[i]),...Object.keys(this.dictionary).filter(e=>i.test(e.toUpperCase())).map(i=>this.dictionary[i.toUpperCase()].toUpperCase())].join("")}replace(i){return i.replace(/./g,i=>this[i])}isUpperCase(i=""){return i.toUpperCase()===i}isLowerCase(i=""){return i.toLowerCase()===i}}var I18N_ALL={a:"áäâàåÄąāãă",e:"éèêëěÊęėēё",i:"íîïi̇řìįī",o:"óôöòøōõơ",u:"úûüùůŭųūư",y:"ýÿŷỳ",n:"ñňŋņń",l:"ḷŀłļĺľ",h:"ḥĥȟħ",c:"çčćĉĊ",g:"ğĝǧģĠġ",s:"şšŝṣșſś","у":"ў","и":"йѝ","е":"ё",d:"đďðḏ",z:"žŻźż",t:"ťțțṭ",w:"ẅŵẃẁ",ae:"æ",ss:"ß","α":"ά","ε":"έ","η":"ή","ι":"ίΐϊ","ο":"ό","υ":"ύΰϋ","ω":"ώ",j:"ĵ",oe:"œ","":"ʰ'ʼ·׳",ii:"î",k:"ķ","к":"ќ","г":"ѓґ",ij:"ĳ",r:"ŕ","і":"ї"};class DiacriticRemover extends DiacriticMapperCore{constructor(...i){return super(i.length?i:[I18N_ALL]),Object.defineProperty(this,"dictionary",{enumerable:!1,configurable:!1}),new Proxy(this,new DiacriticRemoverHandler)}}module.exports=DiacriticRemover;
